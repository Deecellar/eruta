#ifndef OBJ_PROTO_H
#define OBJ_PROTO_H
/*
This file was autogenerated from src/obj.c
by bin/genproto
Please do not hand edit.
*/

/** Allocates an object with the given size in the given pool. 
This will work much like mam_alloc / calloc, except that 
a hidden header is placed before the result, 
which enables reference counting. If klass is NULL,
a default class will be used that does nothing if done is called
and that uses mem_free to free the memory. If pool is NULL, 
then this works just like obj_alloc. */
void * obj_alloc_in_pool(ObjPool* pool, size_t size, ObjClass * klass);

/** Allocates an object with the given size. 
This will work much like mam_alloc / calloc, except that 
a hidden header is placed before the result, 
which enables reference counting. If klass is NULL,
a default class will be used that does nothing if done is called
and that uses mem_free to free the memory. */
void * obj_alloc(size_t size, ObjClass * klass);

/** This increases the reference count and returns 
the pointer passed in. Only works on pointer allocated 
with obj_alloc. Use this when you want to retain a reference 
to the object pointed to by ptr.*/
void * obj_ref(void * ptr);

/** This gets the class info for this object. 
May return null for unclassed objects. Only works on
objects allocated (directly or indirectly) through obj_alloc. */
ObjClass * obj_class(void * ptr);

/** Looks up a function pointer in the class at the given offset. */
ObjMethod * objclass_method_at(ObjClass * klass, size_t offset); 

/** Looks up the free method for the given class. */
ObjMethod * objclass_getfree(ObjClass * klass);

/** Calls the first step of the destructor (done) on the object
pointed to by ptr. */
void * obj_done(void * ptr);

/** Calls the second step of the destructor (free) on the object that must have
been allocated though obj_alloc and pointed to indirectly by ptr. If the object 
has no class or no free function, mem_free will be called to free the memory 
that ptr(indirectly) references. Give the class a do-nothing free function to 
avoid this if needed. Returns NULL, or whatever the free method
of the object's class returns. The idea is to call this as ptr = obj_free(ptr). 
*/
void * obj_free(void * ptr);

/** Reduce the reference count of the object, possibly calling done and free 
on the object if it's reference count became 0. This will return NULL if 
the reference count became 0, otherwise it will return ptr. */
void * obj_unref(void * ptr); 

#endif // OBJ_PROTO_H

