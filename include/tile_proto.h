#ifndef TILE_PROTO_H
#define TILE_PROTO_H
/*
This file was autogenerated from src/tile.c
by bin/genproto on 2012-01-19 11:57:35 +0100
Please do not hand edit.
*/

/**
* A tile set 
*/
struct Tileset_;
typedef struct Tileset_ Tileset;

/** 
* A single tile from a tile map. 
* A tile can only hold up to TILE_FRAMES tiles pointers in itself.
*/
struct Tile_;
typedef struct Tile_ Tile;

  /** Tileset this tile belongs to + index. */
  int           flags;
  /** Information about the tile's properties. */
  int           kind;
  /** Index of currently active animation pointer for this tile. */
  int           anime;
  int           offset;
  /** Index of currently active image pointer for this tile. */
  int           active;
  /** Sub-position in the sheet of the currently active frame. */
  Point         now;
};


/** Cleans up a tileset, and empties it.  */
void tileset_done(Tileset * set);

/** Deallocates a tileset */
void tileset_free(Tileset * set);

/** Initializes a given tileset with a given bitmap tile sheet */
Tileset * tileset_init(Tileset * set, Image * sheet);

/** Creates a new tileset with the given tile sheet image. */
Tileset * tileset_new(Image * sheet);

/** Recalculates the tile's position (now) in it's tile set. */
Tile * tile_recalculate(Tile * tile);

/** Initializes a tile to belong to a given tile set. */
Tile * tile_init(Tile * tile, Tileset * set, int index);

/** Returns a new, unused tile in this tileset and returns it. 
Retuns NULL if the tile could not be added (due to lack of space, etc). */
Tile * tileset_tile(Tileset * set);

/** Gets a tile from a tile set by it's tile id. **/ 
Tile * tileset_get(Tileset * set, int index);

/** Draw a tile to the current active drawing target at the
given coordinates */
void tile_draw(Tile * tile, int x, int y);

#endif // TILE_PROTO_H

