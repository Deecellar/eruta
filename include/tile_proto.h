#ifndef TILE_PROTO_H
#define TILE_PROTO_H
/*
This file was autogenerated from src/tile.c
by bin/genproto on 2012-01-26 13:22:26 +0100
Please do not hand edit.
*/

/**
* A tile set 
*/
struct Tileset_;
typedef struct Tileset_ Tileset;

/** 
* A single tile from a tile map. 
* A tile can only hold up to TILE_FRAMES tiles pointers in itself.
*/
struct Tile_;
typedef struct Tile_ Tile;

/** Cleans up a tileset, and empties it.  */
void tileset_done(Tileset * set);

/** Deallocates a tileset */
void tileset_free(Tileset * set);

/** Retuns the amount of tiles in the tile set. */
int tileset_size(Tileset * set);

/** Initializes a given tileset with a given bitmap tile sheet */
Tileset * tileset_init(Tileset * set, Image * sheet);

/** Creates a new tileset with the given tile sheet image. */
Tileset * tileset_new(Image * sheet);

/** Recalculates the tile's position (now) in it's tile set. */
Tile * tile_recalculate(Tile * tile);

/** Initializes a tile to belong to a given tile set. */
Tile * tile_init(Tile * tile, Tileset * set, int index);

/** Gets a tile from a tile set by it's tile id. **/ 
Tile * tileset_get(Tileset * set, int index);

/** Adds an image to this tile. May return NULL if not enough space, etc. 
* Otherwise returns the tile itself. 
*/
Tile * tile_addframe(Tile * tile, int index);

/** Adds an "animation program" step to this tile. The program is consisted of a list 
* of a single byte instructions. Of these bytes, he lower nybble is the opcode 
* and the higher nybble the operand.
*/
Tile * tile_addanime(Tile * tile, char program);

/** Gets the value of the flags of a tile. */
int tile_flags(Tile * tile);

/** Sets the flags on a tile. */
Tile * tile_flags_(Tile * tile, int flag);

/** Rewinds a tile's animations */
void tile_rewindanime(Tile * tile);

/** Move on to next frame of the animation. */
void tile_nextanime(Tile * tile);

/** Updates a tile to animate it */
void tile_update(Tile * tile);

/** Updates all tiles in a tile set so they all get animated. */
void tileset_update(Tileset * set);

/** Draw a tile to the current active drawing target at the
given coordinates */
void tile_draw(Tile * tile, int x, int y);

/** Tile's index. Returns -1 if tile is NULL; */
int tile_index(Tile * tile); 

/**  Information about the tile's properties. Return -1 if tile is NULL. */
int tile_kind(Tile * tile); 

#endif // TILE_PROTO_H

