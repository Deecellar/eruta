#ifndef GAME_PROTO_H
#define GAME_PROTO_H
/*
This file was autogenerated from src/game.c
by bin/genproto on 2012-01-19 11:57:35 +0100
Please do not hand edit.
*/

/** The game struct containsall game data. */
struct Game_;
typedef struct Game_ Game;

/***/

/** Allocates a game struct */
Game * game_alloc();

/** Frees a game struct */
void game_free(Game * game);

/** Sets error message for game and returns NULL. */
Game * game_errmsg_(Game * game, char * mesg);

/** Gets error message for game. */
char * game_errmsg(Game * game);

/** Registers an event source for this game */
Game * game_eventsource(Game * game, ALLEGRO_EVENT_SOURCE * src);

/** Gets a color from the game' color list. NOT bound checked! */
ALLEGRO_COLOR game_color(Game * game, int color);

/** Sets a color to the game' color list. NOT bound checked! */
ALLEGRO_COLOR game_color_f(Game * game, int color,
                         float r, float g, float b, float a);

/** Initializes the game. It opens the screen, keyboards,
lua interpreter, etc. Get any error with game_errmsg if
this returns NULL. */
Game * game_init(Game * self, BOOL fullscreen);

/** Sets the game's busy status to false */
BOOL game_done(Game * game);

/** Closes the game when it's done. */
Game * game_kill(Game * self);

/** Returns true if the game is busy false if not. */
BOOL game_busy(Game * self);

/** Polls the game's event queue, and gets the next event and stores it in
* event. if it is available. Returns true if there is an event of false if
* not.
*/
int game_poll(Game * game,  ALLEGRO_EVENT * event);

/** Return the game's default font. */
ALLEGRO_FONT * game_font(Game * game);

/** Call this every frame to update the FPS and frames value */
void game_frames_update(Game * game);

/** Returns the amount of frames rendered during this second. */
int game_frames(Game * game);

/** Returns the FPS value. */
double game_fps(Game * game);

#endif // GAME_PROTO_H

