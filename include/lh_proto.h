#ifndef LH_PROTO_H
#define LH_PROTO_H
/*
This file was autogenerated from src/lh.c
by bin/genproto on 2012-01-23 14:50:46 +0100
Please do not hand edit.
*/

/** Lua helper functions. */
#include <stdlib.h>

#include <string.h>

#include <lauxlib.h>

#include "lh.h"



/* Not defined in lauxlib somehow... */

void luaL_openlibs (lua_State *L);



/** Lua helper functions and macros. */

lua_State * lh_new();

/** Creates lua user data in which the pointer to data will be stored. */
void ** lh_pushdata(lua_State *L, const char * name, void * data); 

/** Gets the object at stack index index as a pointer to data */
void * lh_todata(lua_State *L,  int index);

/** Gets the object at stack index index as a pointer to data. 
Performs type checking. */

void * lh_checkdata(lua_State *L, const char * name, int index);

/** Registers the methods and metamethods of the named type. */
int lh_register_data(lua_State *L, const char * name, 

                     luaL_Reg * methods, luaL_Reg * meta);

/** Like lua_rawseti, but with a string key. */
void lh_rawsets(lua_State *L, char * key, int index);

/** Like lua_rawgeti but with a string key */
void lh_rawgets(lua_State *L, int index, char * key);

/**Calls luaL_checktype() with a LUA_TTABLE argument. */
void lh_checktable(lua_State *L, int index);

/** Utility function that calls lua_rawgeti, and then lua_tointeger and lua_pop and returns the result. In other words, it gets an integer 
value at an integer index key from the table at index on the lua stack.

**/

int lh_geti(lua_State *L, int index, int key);

/** Makes a new metatable for the given type name, and prepares it so the data will be able to given methods usin gthe lh_datamethod function. If fun isn ot NULL, it sets the __gc value in the metatable to fun, so data of the given type will be correctly garbage collected. Must be called before calling 
lh_datamethod.

*/

void lh_datainit(lua_State *L, char * name, lua_CFunction fun);

/** adds a method to the given named user data type. */
void lh_datamethod(lua_State *L, char * meta, char * name, lua_CFunction fun);

/** Gets a string that defines the name of the type at stack index index. */
const char * lh_typename(lua_State *L, int index); 

/** Walks over a table at index, calling the walker function as it goes.
* key will be at index -2, and value at index -1 

*/

void lh_tablewalk(lua_State *L, int index, 

                  lh_walker * walker, void * data);

/** Adds a global integer constant to the lua state */
void lh_globalint(lua_State *L, const char *name, const int i);

#endif // LH_PROTO_H

