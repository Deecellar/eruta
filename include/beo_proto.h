#ifndef BEO_PROTO_H
#define BEO_PROTO_H
/*
This file was autogenerated from src/beo.c
by bin/genproto
Please do not hand edit.
*/

/** A union with the possible data values for a BeoValue. */
union BeoValueUnion_;
typedef union BeoValueUnion_ BeoValueUnion;

/** Possible types for the BeoValue */
enum BeoValueType_;
typedef enum BeoValueType_ BeoValueType;

/** A BeoValue is the type for any value data inside the beo interpreter.
*   Implemented as a tagged union with a reference count.
*/
struct BeoValue_;
typedef struct BeoValue_ BeoValue;

/** returns nonzero if the value is of the given type, zero if not. 
Also returns 0 if value is NULL. */
int beo_type_p(BeoValue * value, BeoValueType type); 

/** Constructor for beovalue. */
BeoValue * beovalue_newall(BeoValueType type, BeoValueUnion data);

/** Frees the beovalue uses the given destructor to clean up the data 
too. Can handle strings on it's own.  */
BeoValue * beovalue_free_destroy(BeoValue * self, MemDestructor * destroy);

/** Initializes a beovalue with a long value */
BeoValue * beovalue_initlong(BeoValue * value, long l);

/** Creates a new beovalue with an long inside it. 
Must be freed with beovalue_free_destroy */
BeoValue * beovalue_newlong(long l);

/** Initializes a beovalue with a double value */
BeoValue * beovalue_initdouble(BeoValue * value, double d);

/** Creates a new beovalue with a double inside it. 
Must be freed with beovalue_free_destroy */
BeoValue * beovalue_newdouble(double d);

/** Initializes a beovalue with a c string */
BeoValue * beovalue_initstr(BeoValue * value, char * s);

/** Creates a new beovalue with an string inside it. 
Must be freed with beovalue_free_destroy */
BeoValue * beovalue_newstr(char * s);

/** Initializes a beovalue with a unicode string. 
The unicode string will be duplicated internally except if u is NULL,
so u must still be freed with ustr_free if it was allocated. */
BeoValue * beovalue_initustr(BeoValue * value, USTR * u);

/** Creates a new beovalue with an string inside it. 
Must be freed with beovalue_free_destroy */
BeoValue * beovalue_newustr(USTR * s);

/** Creates a new fail value with an (optional) error string. */
BeoValue * beovalue_initfail(BeoValue * value, char * error);

/** Creates a new beovalue with an FAIL inside it. 
Must be freed with beovalue_free_destroy */
BeoValue * beovalue_newfail(char * error);

/** Creates a new beovalue with an OK value inside it. 
Must be freed with beovalue_free_destroy */
BeoValue * beovalue_newok();

/** Creates a new beovalue with a pointer inside it. */
BeoValue * beovalue_initptr(BeoValue * value, void * ptr); 

/** Creates a new beovalue with a pointer inside it. 
Must be freed with beovalue_free_destroy */
BeoValue * beovalue_newptr(void * ptr);

/** Converts the BeoValue to a long. Stores trtue in ok if ok. 
Stores false in OK and returns 0 in case there was a conversion error. 
OK is ignored if it is NULL. */
double beovalue_getdouble(BeoValue * value, int * ok);

/** Increases the refence count of self and returns self.  */
BeoValue * beo_ref(BeoValue * self);

/** Decreses the reference count. Calls MemDestructor if it's not null. 
Finally calls beovalue_free. Retuns NULL if the value was finalized, 
not-null if not. */
BeoValue * beo_unref(BeoValue * self, MemDestructor destroy);

/** The beo interpreter. */

struct Beo_;
typedef struct Beo_ Beo;

#endif // BEO_PROTO_H

