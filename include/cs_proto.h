#ifndef CS_PROTO_H
#define CS_PROTO_H
/*
This file was autogenerated from src/cs.c
by bin/genproto
Please do not hand edit.
*/

/** Allocates a string with the given size and null-terminates it. 
* Note that csnew(0) will return a pointer to a string that is sipmly '\0';
*/
char * csnew(size_t size);

/** Frees an allocated string and returns NULL. */
char * csfree(char * str);

/** Returns the length of the string without the ending \0 character. 
Also returns 0 if str is NULL. */
size_t cslen(const char * str);

/** Duplicates a null terminated string. 
Allocates memory. Returns NULL if allocation failed, 
or if scr is NULL too. */
char * csdup(const char * src);

/** Copies up to amount characters of a string if possible, 
and returns that as a new string.
Returns NULL if it couldn't copy or if src was NULL. */
char * csncpy(const char * src, size_t amount);

/** Concnatenates amount strings together, the sizes are known before and 
available in the size_list, which MUST also have amount sizes in it. 
size_total must contain the total size of the string. Thos is mostly a helper function for cscat and cscatn.
*/
char * cscatnsize(const char ** str_list, size_t * size_list, 
                  size_t amount, size_t size_total);

/** Concantenates two strings together. Retuns the result as a newly allocated string. */
char * cscat(const char * one, const char * two);

/** Concnatenates amount strings together. */
char * cscatn(const char ** str_list, size_t amount);

/** Joins amount strings together,using str_join as a separator between them. 
The sizes are known before and available in the size_list, which MUST also have amount sizes in it. size_total must contain the total size of the string. This is mostly a helper function for csjoin and csjoinn.
*/
/*
char * csjoinnsize(const char ** str_list, size_t * size_list, 
                  size_t amount, size_t size_total, char * str_join);

#endif // CS_PROTO_H

