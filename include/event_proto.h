#ifndef EVENT_PROTO_H
#define EVENT_PROTO_H
/*
This file was autogenerated from src/event.c
by bin/genproto
Please do not hand edit.
*/

/** Helkper functions for Allegro's events. 
* This mostly exists for use with lua scripting. 
*/


/** Allocates a new allegro event */
ALLEGRO_EVENT * event_alloc();

/** Frees an allegro event that was allocated though event_alloc. 
Returns NULL;*/
ALLEGRO_EVENT * event_free(ALLEGRO_EVENT * self);

/** Returns the type of an event, or 0 if not valid. */
unsigned int event_type(Event * self);

/** Returns the datestamp of an event, or -1.0 if not valid. */
double event_timestamp(Event * self);

/** Returns nonzero if the event's type is mouse related,  zero if not.*/
int event_ismouse(Event * self);

/** Returns nonzero if the event's type is display related,  zero if not.*/
int event_isdisplay(Event * self);

/** Returns nonzero if the event's type is joystick related,  zero if not.*/
int event_isjoystick(Event * self);

/** Returns nonzero if the event's type is keyboard related, zero if not.*/
int event_iskeyboard(Event * self);

/** Returns nonzero if the event's type is keyboard related, zero if not.*/
int event_istimer(Event * self);

/** Returns the x position of  an event (for mouse
and display event) return -1 if not valid. */
int event_x(Event * self);

/** Returns the y position of  an event (for mouse
and display event) return -1 if not valid. */
int event_y(Event * self);

/** Returns the width of an event (for display event) 
returns -1 if not valid. */
int event_width(Event * self);

/** Returns the height of an event (for display event) 
returns -1 if not valid. */
int event_height(Event * self);

/** Returns the orientation of an event (for display event) 
returns -1 if not valid. */
int event_orientation(Event * self);

/** Returns the stick number of a joystick event, -1 on error. */
int event_stick(Event * self);

/** Returns the axis number of a joystick event, -1 on error.  */
int event_axis(Event * self);

/** Returns the position of a joystick event, 0.0 on error  */
float event_pos(Event * self);  

/** Returns the button number of a joystick event or mouse event, -1 on error  */
int event_button(Event * self);

/** returns the keycode for the keyboard event, -1 n error.*/
int event_keycode(Event * self);

/** returns the unicode character for the keyboard event, -1 n error.*/
int event_unichar(Event * self);

/** Returns the modifiers for the keyboard event, -1 n error.*/
int event_modifiers(Event * self);

/** Returns the autorepeat field of the keyboard event, -1 n error.*/
int event_repeat(Event * self);

/** Returns the z for a mouse event, -1 on error */
int event_z(Event * self);

/** Returns the z for a mouse event, -1 on error */
int event_w(Event * self);

/** Returns the dx for a mouse event, -1 on error */
int event_dx(Event * self);

/** Returns the dy for a mouse event, -1 on error */
int event_dy(Event * self);

/** Returns the dz for a mouse event, -1 on error */
int event_dz(Event * self);

/** Returns the dw for a mouse event, -1 on error */
int event_dw(Event * self);

/** Returns the pressure for a mouse event, -1.0 on error */
float event_pressure(Event * self);

/** Returns the count for a timer event, -1 on error */
int64_t event_count(Event * self);

/** Returns the timer error for a timer event, 0.0 on error */
double event_error(Event * self);

#endif // EVENT_PROTO_H

