#ifndef AREA_PROTO_H
#define AREA_PROTO_H
/*
This file was autogenerated from src/area.c
by bin/genproto
Please do not hand edit.
*/

/** Scale factor. */
#define AREA_SCALE_BY (32.0lf)

/** Scales int by scale factor */
#define AREA_SCALE_INT(I) ((double)((INT) I)>>5)) 

/* Thing types. Generally speaking, there are 
things that can move and those that cannot. 
Chipmunks treats them differently in the sense that
static things will all use a single (or one of 
a few) static bodies, which does not need to be 
freed when the thing isn't needed anymore.
*/
#define THING_UNUSED -1
#define THING_WALL   1
#define THING_WATER  2
#define THING_STAIR  3
#define THING_ACTOR  4
#define THING_MOBILE 5
#define THING_ZONE   6

#define THING_WALL_MASS   INFINITY
#define THING_ACTOR_MASS  1.0

enum Thingflags_;
typedef enum Thingflags_ Thingflags;

/**
* A Thing is any in-game object that appears the world/map view.
*/
struct Thing_;
typedef struct Thing_ Thing;

/** Gets the ID of the thing. Returns negative on error or for a
thing that doesn't belong to an area yet.*/
int thing_id(Thing * thing);

/** Sets the ID of the thing. Returns negative on error or 
for a thing that doesn't belong to an area yet (as inicated by newid) 
*/
int thing_id_(Thing * thing, int newid);

/** Sets the z value of the Thing. This influences which layer it
and, if set, it's Shape is in. Logically,
there are 4 layers in every area, 2 bottom ones and 2 top ones. 
Layer 0 is for the floor or walls itself, layer 1 for things that
are standing or lying on the floor, or for edges,
layer 2 is for things on the "top floor", that is, another 
floor above the current one which may be used for bridges, 
overpasess, etc. Layer 3 is then for things standing
or lying on that top layer.
*/
Thing * thing_z_(Thing * self, int z);

/** Sets an individual flag on the Thing. */
int thing_setflag(Thing * self, int flag);

/** Unsets an individual flag on the Thing. */
int thing_unsetflag(Thing * self, int flag);

/** Sets or unsets an individual flag on the Thing. 
If set is true the flag is set, if false it's unset. */
int thing_flag_(Thing * self, int flag, int set);

/** Checks if an individual flag is set. */
int thing_flag(Thing * self, int flag);

/** Uninitializes a thing. */
Thing * thing_done(Thing * self);

/** Frees a thing. */
Thing * thing_free(Thing * self);

/** Allocates a Thing. */
Thing * thing_alloc();

/** Generic initialization of a thing Initializes a Thing. 
Sets the given values and some flags. Links the Shape given
to the Thing if shape is not NULL. 
Also calls area_addthing on the given area if it is 
not null. Returns null if that failed, but does no cleanup.  */
Thing * thing_initgeneric(Thing * self, Area * area, int kind, int z,
                   cpBody * body, cpShape * shape);

/** Initializes a rectangular, static, non-rotating Thing, and makes 
a new body  and rectangular shape for it. Returns NULL on error. 
Uses the area's static body. */
Thing * thing_initstatic(Thing * self, Area * area, 
                       int kind, 
                       int x, int y, int z, int w, int h); 

/** Initializes a thing that cannot rotate.  */
Thing * thing_initnorotate(Thing * thing, Area * area, int kind,
                           int x, int y, int z, int w, int h,
                           cpFloat mass);

/** Allocates and initializes a new Thing. */
Thing * thing_new(int id, int kind, int z,
                   Area * area, cpBody * body, cpShape * shape);

/** Returns an ID for a thing to use. Internally walks over the 
known things and finds an empty cell. Returns negative on error. */
int area_thingid(Area * self);

/** Puts a thing inside the area. Returns NULL on error. 
returns the thing set if ok. Sets the thing's id to it's 
position in the internal array for things the area has. */
Thing * area_addthing(Area * area, Thing * thing);

/** Returns the static body that this area uses for static things. */
cpBody * area_staticbody(Area * area);

/** Deinitializes an area and returns self. */
Area * area_done(Area * self);

/** Frees an area. Returns NULL. */
Area * area_free(Area * self);

/** Allocates an area. */
Area * area_alloc();

/** Start with 1000 things. */
#define AREA_THINGS 1000

/** Initializes an area. */
Area * area_init(Area * self);

/** Makes a new area. */
Area * area_new();

/** Returns the cpSpace that the area uses for dynamics modelling. */
cpSpace * area_space(Area * self);

#endif // AREA_PROTO_H

