#ifndef AREA_PROTO_H
#define AREA_PROTO_H
/*
This file was autogenerated from src/area.c
by bin/genproto
Please do not hand edit.
*/

/** Scale factor. */
#define AREA_SCALE_BY (32.0lf)

/** Scales int by scale factor */
#define AREA_SCALE_INT(I) ((double)((INT) I)>>5)) 

/* Thing types. Generally speaking, there are 
things that can move and those that cannot. 
Chipmunks treats them differently in the sense that
static things will all use a single (or one of 
a few) static bodies, which does not need to be 
freed when the thing isn't needed anymore.
*/
#define THING_WALL   1
#define THING_WATER  2
#define THING_STAIR  3
#define THING_ACTOR  4
#define THING_MOBILE 5
#define THING_ZONE   6

enum Thingflags_;
typedef enum Thingflags_ Thingflags;

/**
* A Thing is any in-game object that appears the world/map view.
*/
struct Thing_;
typedef struct Thing_ Thing;

/** Initializes a Thing. */
Thing * thing_init(Thing * self, int kind, int id, int z,
                   Area * area, cpBody * body, cpShape * shape);

/** Initializes a Thing, and makes a new body and rectangulat shape for it. */
Thing * thing_initmake(Thing * self, int kind, int id, int z,
                       Area * area, int x, int y, int w, int h,
                       cpFloat mass, cpFloat impulse); 

/** Sets an individual flag on the Thing. */
int thing_flag(Thing * self, int flag);

/** Unsets an individual flag on the Thing. */
int thing_unflag(Thing * self, int flag);

/** Sets or unsets an individual flag on the Thing. 
If set is true the flag is set, if false it's unset. */
int thing_doflag(Thing * self, int flag, int set);

/** Checks if an individual flag is set */
int thing_flag_p(Thing * self, int flag);

/** Allocates an area. */
Area * area_alloc();

/** Initializes an area. */
Area * area_init(Area * self);

/** Makes a new area. */
Area * area_new();

/** Deinitializes an area and returns self. */
Area * area_done(Area * self);

/** Frees an area. Returns NULL. */
Area * area_free(Area * self);

/** Returns the cpSpace that the area uses for dynamics modelling. */
cpSpace * area_space(Area * self);

#endif // AREA_PROTO_H

