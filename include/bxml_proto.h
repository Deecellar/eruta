#ifndef BXML_PROTO_H
#define BXML_PROTO_H
/*
This file was autogenerated from src/bxml.c
by bin/genproto
Please do not hand edit.
*/

/**
* Kind of the self. Can be : ATTR, TEXT, TAG, IDATA.
* The latter is for a 2D array of data, for use with the tilemap loading. 
* Comments, entities and parsing instructions are ignored for now
*/
enum BXMLKind_;
typedef enum BXMLKind_ BXMLKind;

;

/**
* An BXML represents one <tag></tag> self and it's children and attributes,
* OR the attributes of a tag.
*/
struct BXML_;
typedef struct BXML_ BXML;

;

/** Initializes a BXML self */
BXML * bxml_init(BXML * self, int kind, BXML * parent);

/** Allocates a new bxml node */
BXML * bxml_alloc();

/** Allocates and initialzes a new bxml node. */
BXML * bxml_new(int kind, BXML * parent);

/** Clean usp a bxml  node, freeing the children recursively. */
BXML * bxml_done(BXML * self);

/** Frees this node and cleans up its children recursively. returns NULL. */
BXML * bxml_free(BXML * self);

/**
* BXMLParser is the parser interface.
*/ 
struct BXMLParse_;
typedef struct BXMLParse_ BXMLParse;

/**
* Results of a parse. Negative states indicate errors.
*/
enum BXMLResult_;
typedef enum BXMLResult_ BXMLResult;

;    

/** State of the parser. Negative states indicate errors. */
enum BXMLState_;
typedef enum BXMLState_ BXMLState;

/**
* BXMLParse is the parser object. The parser works on a character to character 
* basis.
*/
struct BXMLParser_;
typedef struct BXMLParser_ BXMLParser;

/** Makes the parser accept a single character. 
The tag or attribute that is currently being parsed, if available, 
is stored in result. Otherwise NULL is stored. Negative values indicate a 
parse or parser error. */
BXMLResult 
bxmlparser_parse_core(BXMLParser * self, int ch, 
                      BXML ** result);

#endif // BXML_PROTO_H

