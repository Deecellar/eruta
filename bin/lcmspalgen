#!/usr/bin/env ruby




def degree_to_radian(degree)
  return (degree * 2.0 * Math::PI) / 360.0
end

def cielch_to_cielab(l, c, h)
  l = l
  a = Math.cos( degree_to_radian(h) ) * c
  b = Math.sin( degree_to_radian(h) ) * c 
  return l, a, b
end

def cielab_to_cielch(l, a, b)
  begin    
    var_h = (a == 0 && b == 0) ? 0 : Math.atan2(b, a)
  rescue
    warn "Failed with a: #{a}, b: #{b}" 
    raise $!  
  end    
  if (var_h > 0 ) 
    var_h = ( var_h / Math::PI ) * 180
  else
    var_h = 360 - ( var_h.abs() / Math::PI ) * 180
  end 
  c = Math.sqrt( a**2 + b**2)
  h = var_h
  return l, c, h
end  

def hue_to_rgb(v1, v2, vh ) 
   vh += 1.0 if vh < 0.0 
   vh -= 1.0 if vh > 1.0 
   return v1 + (v2 - v1) * 6.0 * vh if (6.0 * vh) < 1.0 
   return v2                        if (2.0 * vh) < 1.0 
   return v1 + (v2 - v1) * ((2.0 / 3.0) - vh ) * 6 if  (3.0 * vh) < 2.0 
   return v1
end

def hsl_to_rgb(h, s, l)
  h = h / 100.0
  s = s / 100.0
  if s == 0.0
   r = (l * 255.0).round.to_i
   g = (l * 255.0).round.to_i
   b = (l * 255.0).round.to_i
   return r, g, b
 else  
   var_2 = 0.0
   if l < 0.5 
    var_2 = l * ( 1.0 + s )
   else
    var_2 = ( l + s ) - ( s * l)
   end 
   
   var_1 = 2.0 * l - var_2
   r = 255.0 * hue_to_rgb( var_1, var_2, h + ( 1.0 / 3.0 ) )
   g = 255.0 * hue_to_rgb( var_1, var_2, h )
   b = 255.0 * hue_to_rgb( var_1, var_2, h - ( 1.0 / 3.0 ) )
   return r.round.to_i, g.round.to_i, b.round.to_i
  end
end 
  
colors = []
# handle = File.popen("icctrans -o '*sRGB' -i '*Lab'", 'w+')
H_LIST = (0...360).step(15).to_a
S_LIST = [ 50, 100]


L_LIST = [  5, 20, 35, 50, 65, 80, 95 ]

# L_LIST = [  5, 17, 30, 43, 56, 69, 82, 95 ]
# L_LIST = [  5, 16, 27, 38, 50, 61, 72, 83, 95 ]

# L_LIST = [ 10, 30, 50, 70, 90]
# L_LIST = [  0, 10,  30, 50, 70, 90, 100]
# S_LIST = [-100,  0, 100]
# A_LIST = [-100, -50, 0, 50, 100]
# B_LIST = [-100, -50, 0, 50, 100]
# A_LIST = [-100, -75, -50, -25, 0, 25, 50, 75, 100]
# B_LIST = [-100, -75, -50, -25, 0, 25, 50, 75, 100]
# A_LIST = [-100, -66, -33,   0,  33,  66, 100]
A_LIST   = [-128, -84, -42,   0,  42,  84, 128] 
B_LIST   = [-128, -84, -42,   0,  42,  84, 128]

#   for a in A_LIST do
#     for b in B_LIST do
#       for l in L_LIST do
#         l2, c, h = cielab_to_cielch(l, a, b)
#         colors << [h, c, l, a, b]
#       end
#     end
#   end

  for h in H_LIST do
    for si in S_LIST do
      for li in L_LIST do
        r, g, b = hsl_to_rgb(h, si, li)
        colors << [h, si, li, r, g, b]
      end
    end
  end

colors.sort!

# colors.each do |color| 
#   h, c, l, a, b = * color 
#    # l, a, b = cielch_to_cielab(l, c, h)
#   handle << "#{l}\n#{a}\n#{b}\n"
# end

# end icctrans  
# handle << "q\n"
# result = handle.read
# lines  = result.split("\n").map do |l| 
#   l.strip.gsub(/[^0-9 \.]+/, '').split(" ").map do |c|
#     c.to_f.round
#   end
# end

# lines.sort!.uniq!

# puts "GIMP Palette
# Name: eruta_lab_limited
# Columns: 7
# #"

puts "<!doctype html>
<html><head></head>
<body style='font-family: monospace; background-color:#888; font-size:10px;'>"

duplicates = {}
count = 0
oldhh = nil
colors.each do |l| 
  hh, ss, ll, r, g, b = *l
  hh = hh.to_i.to_s.rjust(3, '0')
  if oldhh != hh 
    puts "<br/>"
    oldhh = hh
  end  
  ss = ss.to_i.to_s.rjust(3, '0')
  lo = ll
  ll = ll.to_i.to_s.rjust(3, '0')  
  rh = r.to_i.to_s(16).rjust(2, '0')[0] * 2
  gh = g.to_i.to_s(16).rjust(2, '0')[0] * 2
  bh = b.to_i.to_s(16).rjust(2, '0')[0] * 2
  ar = 255 - r.to_i
  ag = 255 - g.to_i
  ab = 255 - b.to_i
  rah = ar.to_s(16).rjust(2, '0')
  gah = ag.to_s(16).rjust(2, '0')
  bah = ab.to_s(16).rjust(2, '0')  
  he  = "##{rh}#{gh}#{bh}"
  ahe = (lo < 50) ? "#fff" : "#000"
  
  res = "#{rh}#{gh}#{bh}"
  unless duplicates[res]
    duplicates[res] = true  
  puts "<span style='background-color: #{he}; color: #{ahe}'>&nbsp;&nbsp;#{he} #{hh} #{ll} #{ss} &nbsp;</span>\n"
  else 
    puts "<span style='background-color: #{he}; color: #{he}'>&nbsp;&nbsp;#{he} #{hh} #{ll} #{ss} &nbsp;</span>\n"
  end
  count +=1
  # if count % (L_LIST.size  + S_LIST.size) == 0
  
end


puts  "</body></html>"





