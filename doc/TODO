
 //==============================\\  
|| ERUTA/ERUMA PLAN AND TODO FILE ||
 \\==============================//
 
+------+
| PLAN |
+------+

==== General ====

Eruta will be a 2D or 2.5D game. 
  Rationale: I like the old-school 2D look. Also, I suck at modelling. 
  I'm slighly better at 2D pixelling. 3D games are more difficult and 
  time-consuming to implement. 

Programmed in Ruby and C: 
  Rationale: Ruby is used generaly for speed and ease of development. C for
  libraries, performance bottlenecks and wrapping up the distribution as 
  an executable.
  
Use ruby 1.9.1 preview and up:  
  Rationale: Unicode support is great, faster, and when Eruta is finished, 
  Ruby 1.9.x or even 2.x will be out. We have to anticipate the future a bit.
  
Using ruby-sdl version 2.x or higher and perhaps later ruby OpenGL, depending on
how SDL 1.3 turns out. 
  Rationale: SDL is still the de facto standard for open source games.

Screen resolution exactly 640x480. Color depth minimum 16bpp or better. Perhaps
implement scaling to other resolutons trough OpenGL or 2xSai, etc later. 
  Rationale: Old-style feeling and limit art requrements.

Needed Functionality:
Sprites
Tile map
Particle engine
Camera module
Physical world
Collision detection
Input mapping (to commands/events)
Music handling
Sound handling
Scripting of maps and events.
Game system: stats, skills, techniques, battle resolution, etc, etc.

Tile Map
Tile map with tiles of 32x32 pixels. Before, 40x40 or 64x64 were considered, but
my art skills are too low to create good art with such resolutions. Basically,
the smaller the tiles and sprites, the easier they are to draw for me. Also,
32x32 is easy to accelerate with OpenGL later, and fits the resolution well.
Tile map distinguishes between tile layers wich dictate rendering and world
layers which dictate gameplay (ie, on which levels the sprites can “be”).
Tile map has optimally 2, 4, or sometimes 6  drawing layers of tiles. Testing
shows 4 is optimal for speed, but 6 may be OK if the layers are largely empty.
Layers are usually grouped in pairs for the “world layers”. Layer 1 is the first
floor, layer 2 is anything that stands on that floor and any fringes/overlaps
from one kind of floor to another. Layers 1 and 2 are always under al sprites.
Layer 3 and 4 are normally the “floor above” the player, however, the player may
walk there in case of bridges or parallax.
Option for parallax scrolling background bitmap, or for any layer to do parallax
scrolling. Scrolling can be locked or unlocked in x and y directions. Although
only one bitmap background can be displayed at once, it's possible for a map to
change the background depending on what's needed. (night/day/scripting/etc). The
background bitmap width and height must also be of integer multipleof 32 pixels.
Tile maps use tile sets. Tile sets are directories containing tile images in
.png format with a width and height that are integer multiples of 32, and that
contain many individual tiles.
Keeping with convention over configuration, the tile maps are read in, split up
in 32x32 tiles and interpreted according to the following rules:
Generally:
There are two kinds of tile images, animated and non-animated. Animated tile
images end in _anim.png, non-animated tile images do not.
Tile images are read in in alphabetical order. The name of the tile image should
start with tiles_ , followed by a 3 digit number, to ensure the order of loading
stays the same: eg tiles_1000_village.png or tiles_1100_village_anim.png.  It's
best to start from 1000 and increase the number by 10 so it's possible to slide
a tile image in between existing ones. The starting number will also determine
the first number of the tile in the set.
Normally, a tile is a solid tile, without transparency. 
If the tile contains any alpha values, it is loaded as a tile with transparency.
For non-animated tile maps: 
Fully transparent tiles are not loaded, however, their tile number is skipped.
Tiles are numbered from left to right and from top to bottom.
For animated tile maps:
The next may be changed, because of the use of Tiled map editor, just use tile
properties to make animations. 
Animated tile maps must be 16x32 = 512 pixels wide. Each of the 16 tiles of the
width of one row of 32 pixels high-tiles is one animation. 
An animation that has less than 16 frames should use a fully black tile to
signal the end of the animation run.
A fully white tile should be used to signal that the last real tile frame should
be reused. This will, in essence prevent identical frames from being loaded as
different ones and reduce animation memory consumption.
Tiles are numbered from top to bottom. 
In the share/image/tileset/control directory there is a one tile set of size 256
x , named tile_0000_control.png This tile set contains 32 control tiles, that do
not have a rendering meaning but a physical meaning. They are in order of
appearance:
1.Null tile(black)
2.Transparent tile
3.Scroll blocker. Can not be scrolled to normally.
4.Clip tile. Will clip the map view if the character is inside aan area of them.
5.All other tiles of the are reserved

Tile Map
Tile map with tiles of 32x32 pixels. Before, 40x40 or 64x64 were considered, but
my art skills are too low to create good art with such resolutions. Basically,
the smaller the tiles and sprites, the easier they are to draw for me. Also,
32x32 is easy to accelerate with OpenGL later if needs be, and fits the
resolution well.
Tile map distinguishes between tile layers which dictate rendering and world
layers which dictate gameplay (ie, on which levels the sprites can “be”).
Tile map has optimally 2, 4, or sometimes 6  drawing layers of tiles. Testing
shows 4 is optimal for speed, but 6 may be OK if the layers are largely empty.
Layers are usually grouped in pairs for the “world layers”. Layer 1 is the first
floor, layer 2 is anything that stands on that floor and any fringes/overlaps
from one kind of floor to another. Layers 1 and 2 are always under al sprites.
Layer 3 and 4 are normally the “floor above” the player, however, the player may
walk there in case of bridges or parallax.
Option for parallax scrolling background bitmap, or for any layer to do parallax
scrolling. Scrolling can be locked or unlocked in x and y directions. Although
only one bitmap background can be displayed at once, it's possible for a map to
change the background depending on what's needed. (night/day/scripting/etc). The
background bitmap width and height must also be of integer multipleof 32 pixels.
Tile maps use tile sets. Tile sets are directories containing tile images in
.png format with a width and height that are integer multiples of 32, and that
contain many individual tiles.
Keeping with convention over configuration, the tile maps are read in, split up
in 32x32 tiles and interpreted according to the following rules:
Generally:
There are two kinds of tile images, animated and non-animated. Animated tile
images end in _anim.png, non-animated tile images do not.
Tile images are read in in alphabetical order. The name of the tile image should
start with tiles_ , followed by a 3 digit number, to ensure the order of loading
stays the same: eg tiles_1000_village.png or tiles_1100_village_anim.png.  It's
best to start from 1000 and increase the number by 10 so it's possible to slide
a tile image in between existing ones. The starting number will also determine
the first number of the tile in the set.
Normally, a tile is a solid tile, without transparency. 
If the tile contains any alpha values, it is loaded as a tile with transparency.
For non-animated tile maps: 
Fully transparent tiles are not loaded, however, their tile number is skipped.
Tiles are numbered from left to right and from top to bottom.
For animated tile maps:
Animated tile maps must be 16x32 = 512 pixels wide. Each of the 16 tiles of the
width of one row of 32 pixels high-tiles is one animation. 
An animation that has less than 16 frames should use a fully black tile to
signal the end of the animation run.
A fully white tile should be used to signal that the last real tile frame should
be reused. This will, in essence prevent identical frames from being loaded as
different ones and reduce animation memory consumption.
Tiles are numbered from top to bottom. 
In the share/image/tileset/control directory there is a one tile set of size 256
x , named tile_0000_control.png This tile set contains 32 control tiles, that do
not have a rendering meaning but a physical meaning. They are in order of
appearance:
1.Null tile(black)
2.Transparent tile
3.Scroll blocker. Can not be scrolled to normally.
4.Clip tile. Will clip the map view if the character is inside aan area of them.
5.All other tiles of the are reserved


Particle engine
Already 50% done. Can display rain, snow, blood, bursts. Explosions and spell
effects would be nice as well. Still needs to be adapted to use camera. Need to
allow bitmaps as well as drawing for the particles. Need to allow bitmap
animations for certain effects.  Probably need a mixin for this.

Camera module
The camera module should not only model a camera (that is, a view of a
rectangular area that can move in the “world” of the game and translate these
world coordinates to screen coordinates. We also need a mixin to model an object
that has a position I the world and that can move there, and that cooperates
well with the camera. Perhaps this belongs in the physics, though. 

Physics
Originally planning to use Chipmunk, but it's somewhat unwieldy. Hand-implemened
a more simple system that is quite fast to boot.
  
+------+
| TODO |
+------+

o Tile map 
  * Enable tile animations:
  * Load animations.
  * Correctly display animations.
  
o Particle Engine Stardust
  * Group for flexibility.
  * Allow bitmaps as well as colors/shapes.
  * Explosions.
  * Spell effects.
  
o Pysics:   
  * Movable mixin (thing that can move in the real world but needs 
    to be displayed on screen taking the camera and the current viewport 
    into consideration)

o Eruma:
  * GUI for setting background.

    
o AND MUCH MORE! ^_^;;;
  
  

+------+
| DONE |
+------+



o Tile map:
  * Static tilesets.
  * Static background: 
    Use <background>name</background> tag manually, no GUI in Eruma for now.
  * Also load tilemapeditor.org TMX maps.
  
o Physics:
  * Simple rectangle bound box based collision detection.  
