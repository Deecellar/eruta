
 //==============================\\  
|| ERUTA/ERUMA PLAN AND TODO FILE ||
 \\==============================//
 
+------+
| PLAN |
+------+

==== General ====

Eruta will be a 2D or 2.5D game. 
  Rationale: I like the old-school 2D look. 3D games are more resource hungry 
  and time-consuming to implement.  

Programmed in Ruby and C: 
  Rationale: Ruby is used generaly for speed and ease of development. C for
  libraries, performance bottlenecks and wrapping up the distribution as 
  an executable.
  
Use ruby 1.9.2 and up:  
  Rationale: Unicode support is great, faster, and when Eruta is finished, 
  Ruby 1.9.x or even 2.x will be out. We have to anticipate the future a bit.
  
Using SDL 1.2, wraped in Gari. Bakcend of Gari may change if needed. 
  Rationale: SDL is still the de facto standard for open source games. SFML was 
  tried but found a bit slow and difficult to wrap in Ruby. Allegro 5 is still 
  slow on unacellerated graphic cards.

Screen resolution exactly 640x480. Color depth minimum 16bpp or better. Perhaps
implement scaling to other resolutons trough OpenGL or 2xSai, etc later.
  Rationale: Old-style feeling and limit art requrements.

Needed Functionality:
Sprites
Tile map
Particle engine
Camera module
Physical world
Collision detection
Input mapping (to commands/events)
Music handling
Sound handling
Scripting of maps and events.
Game system: stats, skills, techniques, battle resolution, etc, etc.

Tile Map
--------

Tile map with tiles of 32x32 pixels. Before, 40x40 or 64x64 were considered, but
these are too large and make the art requirements too high. Also, 32x32 is easy 
to accelerate with OpenGL later, and fits the resolution well.

Tile map distinguishes between tile layers wich dictate rendering and world
layers which dictate gameplay (ie, on which levels the sprites can “be”).
Tile map has optimally 2, 4, or sometimes 6  drawing layers of tiles. Testing
shows 4 is optimal for speed, but 6 may be OK if the layers are largely empty.
Layers are usually grouped in pairs for the “world layers”. Layer 1 is the first
floor, layer 2 is anything that stands on that floor and any fringes/overlaps
from one kind of floor to another. Layers 1 and 2 are always under al sprites.
Layer 3 and 4 are normally the “floor above” the player, however, the player may
walk there in case of bridges, overlays, or parallax.

Option for parallax scrolling background bitmap, or for any layer to do parallax
scrolling. Scrolling can be locked or unlocked in x and y directions. Although
only one bitmap background can be displayed at once, it's possible for a map to
change the background depending on what's needed. (night/day/scripting/etc). The
background bitmap width and height must also have a size that is an integer 
multiple of 32 pixels.

Every maps uses one or more sets. Sets are files in .png format with a width and 
height that are integer multiples of 32, and that contain many individual tiles.
Keeping with convention over configuration, the tile maps are read in, split up
in 32x32 tiles and interpreted according to the following rules:

Every map describes the names of the tile it uses. The file name of the 
set is of the form set_name_xxx000.png where xxx000 is a number with at least 4 
digits that signifies the start index of the set. Tiles in a set are numbered 
from left to right and from top to bottom, starting with the start index of the 
set. A set may contain at most 1000 tiles. So, for instance  the second tile at 
the top left of a tile set named set_2000_test.png, will be numbered 2001.

The idea of this is for maps to be broadly compatible with each other even if 
they use different tile sets, and also to make it easy to swap tile sets if 
needed.

Normally, a tile is a solid tile, without transparency. If the tile contains any 
alpha values, it is loaded as a tile with transparency.


Particle engine

Already 50% done. Can display rain, snow, blood, bursts. Explosions and spell
effects would be nice as well. Still needs to be adapted to use camera. Need to
allow bitmaps as well as drawing for the particles. Need to allow bitmap
animations for certain effects.  Probably need a mixin for this.

Camera module

The camera module should not only model a camera (that is, a view of a
rectangular area that can move in the “world” of the game and translate these
world coordinates to screen coordinates. We also need a mixin to model an object
that has a position I the world and that can move there, and that cooperates
well with the camera. Perhaps this belongs in the physics, though.

Physics

Use Chipmunk anyway, but tweaked it. My own system was way too unwieldy and 
difficult to use. 
  
+------+
| TODO |
+------+

o Tile map 
  * Enable tile animations:
  * Load animations.
  * Correctly display animations.
  
o Particle Engine Stardust
  * Group for flexibility.
  * Allow bitmaps as well as colors/shapes.
  * Explosions.
  * Spell effects.
  
o Pysics:   
  * Movable mixin (thing that can move in the real world but needs 
    to be displayed on screen taking the camera and the current viewport 
    into consideration)

o Eruma:
  * GUI for setting background.

    
o AND MUCH MORE! ^_^;;;
  
  

+------+
| DONE |
+------+



o Tile map:
  * Static tilesets.
  * Static background: 
    Use <background>name</background> tag manually, no GUI in Eruma for now.
  * Also load tilemapeditor.org TMX maps.
  
o Physics:
  * Simple rectangle bound box based collision detection.  
